function interactive_pole_zero_gui
    % Create figure
    f = figure('Name', 'Interactive Pole-Zero Plot', 'NumberTitle', 'off', 'Position', [100, 100, 1600, 600]);

    % Create the pole-zero diagram axis
    ax_pz = subplot(1, 3, 1, 'Parent', f);
    hold(ax_pz, 'on');
    grid(ax_pz, 'on');
    axis(ax_pz, [-1.5 1.5 -1.5 1.5]);
    xlabel(ax_pz, 'Real Part');
    ylabel(ax_pz, 'Imaginary Part');
    title(ax_pz, 'Pole-Zero Diagram');

    % Drawing the unit circle
    rectangle('Position', [-1 -1 2 2], 'Curvature', [1 1], 'EdgeColor', 'k', 'LineStyle', '--');

    % Create the frequency response axis (magnitude only)
    ax_fr_mag = subplot(1, 3, 2, 'Parent', f);

    % Create the time-domain response axis (impulse response)
    ax_impulse = subplot(1, 3, 3, 'Parent', f);

    % Initialize poles and zeros
    poles = [-0.1 - 0.5i; -0.1 + 0.5i];
    zeros = [-1; -1];

    % Plot initial pole-zero points
    p_poles = plot(ax_pz, real(poles), imag(poles), 'rx', 'MarkerSize', 10, 'LineWidth', 2);
    p_zeros = plot(ax_pz, real(zeros), imag(zeros), 'bo', 'MarkerSize', 10, 'LineWidth', 2);
    
    % Calculate frequency response
    [b, a] = zp2tf(zeros, poles, 1);
    [h, w] = freqz(b, a, 1024, 44100); % Use only the positive frequency range
    
    % Plot magnitude response
    plot(ax_fr_mag, w, 20*log10(abs(h)), 'b', 'LineWidth', 2);
    grid(ax_fr_mag, 'on');
    xlabel(ax_fr_mag, 'Frequency (Hz)');
    ylabel(ax_fr_mag, 'Magnitude (dB)');
    title(ax_fr_mag, 'Frequency Response (Magnitude)');

    % Plot initial impulse response
    [imp_response, t] = impz(b, a, 50); % Get first 50 samples
    stem(ax_impulse, t, imp_response, 'filled', 'b');
    grid(ax_impulse, 'on');
    xlabel(ax_impulse, 'Samples');
    ylabel(ax_impulse, 'Amplitude');
    title(ax_impulse, 'Impulse Response');

    % Callback
    set(f, 'WindowButtonDownFcn', @click_callback);
    
    function click_callback(~, ~)
        
        coords = get(ax_pz, 'CurrentPoint');
        x = coords(1, 1);
        y = coords(1, 2);
        
        % Find the nearest pole or zero
        [min_dist, idx] = min(abs([poles; zeros] - (x + 1i*y)));
        
        if min_dist < 0.1
            % Start drag-and-drop
            set(f, 'WindowButtonMotionFcn', {@drag_callback, idx});
            set(f, 'WindowButtonUpFcn', @release_callback);
        end
    end

    function drag_callback(~, ~, idx)
        % Update the coordinates for the selected point
        coords = get(ax_pz, 'CurrentPoint');
        x = coords(1, 1);
        y = coords(1, 2);

        if idx <= length(poles)
            poles(idx) = x + 1i*y;
        else
            zeros(idx - length(poles)) = x + 1i*y;
        end

        % Update the pole-zero diagram
        set(p_poles, 'XData', real(poles), 'YData', imag(poles));
        set(p_zeros, 'XData', real(zeros), 'YData', imag(zeros));

        % Update the frequency response
        [b, a] = zp2tf(zeros, poles, 1);
        [h, w] = freqz(b, a, 1024, 44100); % Use only the positive frequency range
        
        % Update magnitude response
        set(findobj(ax_fr_mag, 'Type', 'line'), 'XData', w, 'YData', 20*log10(abs(h)), 'LineWidth', 2);

        % Update impulse response
        [imp_response, t] = impz(b, a, 50); % Get first 50 samples
        cla(ax_impulse); % Clear previous plot
        stem(ax_impulse, t, imp_response, 'filled', 'b');
    end

    function release_callback(~, ~)
        % Stop drag-and-drop
        set(f, 'WindowButtonMotionFcn', '');
        set(f, 'WindowButtonUpFcn', '');
    end
end
